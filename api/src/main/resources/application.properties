# Heroku will inject the PORT dynamically
server.port=${PORT:8081} # Default to 8081 locally

# Gateway configuration
spring.application.name=gateway
spring.cloud.gateway.discovery.locator.enabled=false

# Route for Slots (point to the correct backend URL)
spring.cloud.gateway.routes[0].id=appointments-service
spring.cloud.gateway.routes[0].uri=https://cc-book-app-735691842d39.herokuapp.com
spring.cloud.gateway.routes[0].predicates[0]=Path=/slots/**

# Route for Auth (adjust to your actual auth service URL)
spring.cloud.gateway.routes[1].id=auth-service
spring.cloud.gateway.routes[1].uri=https://cc-book-app-735691842d39.herokuapp.com
spring.cloud.gateway.routes[1].predicates[0]=Path=/auth/**

# CORS Configuration
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedOrigins=${CORS_ALLOWED_ORIGINS:http://localhost:5173,https://frontend-service.herokuapp.com}
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedHeaders=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowCredentials=true

# Heroku-specific HTTPS handling
server.forward-headers-strategy=native

# Actuator for Heroku health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always
spring.main.web-application-type=reactive

# Logging configuration
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.http.server.reactive=INFO
